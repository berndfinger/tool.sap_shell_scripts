#!/bin/bash
# sapfile: Determine and display SAP file type
#
# Copyright 2023 Bernd Finger, Red Hat
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -o nounset
set -o pipefail

usage () {
   echo "sapfile: Determine and display SAP file type. If unknown, call the file command."
   echo "Usage: sapfile [OPTION...] [FILE...]"
   echo "Determine and display type of SAP FILEs, optionally followed by additional information."
   echo "  -h|--help                  display this help and exit"
   echo "  -l|--long                  long listing: also display the file type, taken from the output of the file command"
   echo "  -d|--directory             also display the directory where to move the archive files, for use with Ansible role"
   echo "                               community.sap_install.sap_install_media_detect"
   echo "  -e|--extract               also display if the SAP FILE should be extracted, for use with Ansible role"
   echo "                               community.sap_install.sap_install_media_detect"
   echo "  --lsar_file=<FILE>         the name of the program to list the content of a RAR file, if different from 'lsar',"
   echo "                               either as the name of a file in one of the PATH directories or as an FQPN."
   echo "                               When specifying the 'unrar' program, it will be called with option 'lb'."
   echo "  --sapcar_file=<FILE>       the name of the sapcar program, if different from 'sapcar', either as the name of a file"
   echo "                               in one of the PATH directories or as an FQPN."
   echo ""
   echo "Requires:"
   echo "- lsar (program to list the content of a RAR package, e.g. as part of the 'unar' package from the EPEL RHEL repo)"
   echo "- zipinfo (contained in the unzip RHEL package)"
   echo "- sapcar (SAP program to handle sapcar files; typical filename: SAPCAR_1115-70006178.EXE)"
}

# option defaults:
_DISPLAY_FILE_TYPE="n"
_DISPLAY_DIRECTORY="n"
_DISPLAY_EXTRACT="n"
_SAPCAR_FILE='sapcar'
_LSAR_FILE='lsar'

if [[ ${#} == 0 ]]; then
   usage
   exit 1
fi

options=":ldeh-:"
while getopts "$options" opt; do
   case ${opt} in
      -)
         case "${OPTARG}" in
            long)
               _DISPLAY_FILE_TYPE="y"
               ;;
            directory)
               _DISPLAY_DIRECTORY="y"
               ;;
            extract)
               _DISPLAY_EXTRACT="y"
               ;;
            lsar_file)
               if [[ ${!OPTIND-x} == x ]]; then
                  usage
                  exit 0
               fi
               _LSAR_FILE="${!OPTIND}"
               OPTIND=$(( ${OPTIND} + 1 ))
               ;;
            lsar_file=*)
               _LSAR_FILE=${OPTARG#*=}
               opt=${OPTARG%=${_LSAR_FILE}}
               ;;
            sapcar_file)
               if [[ ${!OPTIND-x} == x ]]; then
                  usage
                  exit 0
               fi
               _SAPCAR_FILE="${!OPTIND}"
               OPTIND=$(( ${OPTIND} + 1 ))
               ;;
            sapcar_file=*)
               _SAPCAR_FILE=${OPTARG#*=}
               opt=${OPTARG%=${_SAPCAR_FILE}}
               ;;
            help)
               usage
               exit 0
               ;;
            *)
               if [[ "$OPTERR" = 1 ]] && [[ "${options:0:1}" != ":" ]]; then
                  echo "Invalid option -${OPTARG}"
                  usage
               fi
               exit 0
               ;;
         esac;;
      l)
         _DISPLAY_FILE_TYPE="y"
         ;;
      d)
         _DISPLAY_DIRECTORY="y"
         ;;
      e)
         _DISPLAY_EXTRACT="y"
         ;;
      h)
         usage
         exit 0
         ;;
      \?)
         echo "Invalid option -$OPTARG"
         usage
         exit 0
         ;;
   esac
done
shift "$((OPTIND-1))"

if [[ "${_LSAR_FILE}" == *"lsar"* ]]; then
   _LSAR_COMMAND="${_LSAR_FILE}"
elif [[ "${_LSAR_FILE}" == *"unrar"* ]]; then
   _LSAR_COMMAND="${_LSAR_FILE} lb"
fi

_ARCHIVE_TYPE="other"

for _FILE in "$@"; do
   _FILE_OUTPUT=$(file "${_FILE}" | sed 's,'"${_FILE}"': ,,')
   if [[ ${_FILE_OUTPUT}. == "data." ]] && [[ (${_FILE##*.} == "SAR" || ${_FILE##*.} == "sar") ]]; then
      _ARCHIVE_TYPE="sapcar"
      _list_content="${_SAPCAR_FILE} -tvf"
   else
      _ARCHIVE_TYPE=$(echo "${_FILE_OUTPUT}" | awk '
      BEGIN{_file_type="other"}
      /RAR self-extracting archive/{_file_type="rarexe"}
      /RAR archive data/{_file_type="rar"}
      /Zip archive data/{_file_type="zip"}
      /SAPCAR archive data/{_file_type="sapcar"}
      /directory/{_file_type="dir"}
      END{print _file_type}')
      if [[ ${_ARCHIVE_TYPE}. == "rarexe." ]]; then
         _list_content="${_LSAR_COMMAND}"
      elif [[ ${_ARCHIVE_TYPE}. == "rar." ]]; then
         _list_content="${_LSAR_COMMAND}"
      elif [[ ${_ARCHIVE_TYPE}. == "zip." ]]; then
         _list_content="zipinfo -1"
      elif [[ ${_ARCHIVE_TYPE}. == "sapcar." ]]; then
         _list_content="${_SAPCAR_FILE} -tvf"
      elif [[ ${_ARCHIVE_TYPE}. == "dir." ]]; then
         _list_content=""
      fi
   fi
   printf "%-40s " "${_FILE}":

   if [[ ! -e "${_FILE}" ]]; then
      echo "No such file or directory."
      exit 1
   fi

   SAP_FILE_TYPE_FROM_FILENAME=$(echo "${_FILE}" | awk '
   BEGIN{_sap_file_type="look_inside"}
   /SAPCAR/&&/\.EXE/{_sap_file_type="sapcar"}
   /IMDB_SERVER/&&/\.SAR/{_sap_file_type="saphana"}
   /IMDB_CLIENT/&&/\.SAR/{_sap_file_type="saphana_client"}
   !/IMDB_SERVER/&&!/IMDB_CLIENT/&&/IMDB/&&/\.SAR/{_sap_file_type="saphana_other"}
   /SWPM/&&/\.SAR/{_sap_file_type="sap_swpm"}
   /SAPHOSTAGENT/&&/\.SAR/{_sap_file_type="sap_hostagent"}
   /SAPEXE_/||/SAPEXEDB_/{_sap_file_type="sap_kernel"}
   /igsexe/||/igshelper/{_sap_file_type="sap_igs"}
   /SAPWEBDISP_/{_sap_file_type="sap_webdisp"}
   /SAPJVM/{_sap_file_type="sap_jvm"}
   /ASEBC/{_sap_file_type="sapase_client"}
   /COMPLETE/{_sap_file_type="saphana_backup"}
   /S4/&&/HANA/&&/LANG/{_sap_file_type="sap_s4hana_lang"}
   /S4/&&/EXPORT/{_sap_file_type="sap_s4hana_export"}
   /BW4/&&/EXPORT/{_sap_file_type="sap_bw4hana_export"}
   /VCH/&&/\.SAR/{_sap_file_type="sap_vch_afl"}
   END{print _sap_file_type}')

   if [[ ${SAP_FILE_TYPE_FROM_FILENAME}. != "look_inside." ]]; then
      _SAP_FILE_TYPE=${SAP_FILE_TYPE_FROM_FILENAME}
   else
      if [[ ${_ARCHIVE_TYPE}. == "dir." ]]; then
         _SAP_FILE_TYPE=${_FILE_OUTPUT}
      elif [[ ${_ARCHIVE_TYPE}. == "rarexe." ||
              ${_ARCHIVE_TYPE}. == "rar." ||
              ${_ARCHIVE_TYPE}. == "zip." ||
              ${_ARCHIVE_TYPE}. == "sapcar." ]]; then
         _SAP_FILE_TYPE=$(eval "${_list_content}" "${_FILE}" | awk '
         BEGIN{_sap_file_type="sap_unknown"}
         /BD_SYBASE_ASE/{_sap_file_type="sapase"}
         /ASEBC/{_sap_file_type="sapase_client"}
         /MaxDB_7.9/{_sap_file_type="sapmaxdb"}
         /19cinstall.sh/{_sap_file_type="oracledb"}
         /OCL_LINUX_X86_64/{_sap_file_type="oracledb_client"}
         /brtools/{_sap_file_type="oracledb_tools"}
         /db2setup/{_sap_file_type="ibmdb2"}
         /db6_update_client.sh/{_sap_file_type="ibmdb2_client"}
         /db2aese_c.lic/{_sap_file_type="ibmdb2_license"}
         /DATA_UNITS\/EXPORT/{_sap_file_type="sapecc_export"}
         /EXP[0-9]/{_sap_file_type="sapecc_ides_export"}
         /DATA_UNITS\/EXP[0-9]/{_sap_file_type="sapnwas_abap_export"}
         /DATA_UNITS\/JAVA_EXPORT_JDMP/{_sap_file_type="sapnwas_java_export"}
         /format error in header/{_sap_file_type="format_error_in_header"}
         END{print _sap_file_type}')
      else
         _SAP_FILE_TYPE="sap_unknown"
      fi
   fi

   _DIRECTORY=${_SAP_FILE_TYPE}
   _EXTRACT="y"

   case ${_SAP_FILE_TYPE} in
      directory)
         _EXTRACT="n"
         ;;
      sapcar)
         _EXTRACT="n"
         ;;
      sapase|sapase_client)
         _DIRECTORY="sapase"
         ;;
      sapmaxdb)
         ;;
      oracledb|oracledb_client|oracledb_tools)
         _DIRECTORY="oracledb"
         ;;
      ibmdb2|ibmdb2_client|ibmdb2_license)
         _DIRECTORY="ibmdb2"
         ;;
      saphana|saphana_client|saphana_other)
         _DIRECTORY="saphana"
         ;;
      sap_swpm|sap_kernel|sap_igs|sap_webdisp|sap_jvm)
         _DIRECTORY="sap_swpm"
         _EXTRACT="n"
         ;;
   esac

   printf "%-24s " "${_SAP_FILE_TYPE}"
   if [[ ${_DISPLAY_DIRECTORY}. == "y." ]]; then
      printf "%-24s" "${_DIRECTORY}"
   fi
   if [[ ${_DISPLAY_FILE_TYPE}. == "y." ]]; then
      printf "%-6s " "${_ARCHIVE_TYPE}"
   fi
   if [[ ${_DISPLAY_EXTRACT}. == "y." ]]; then
      printf "%-2s" "${_EXTRACT}"
   fi
   printf "\n"
done
